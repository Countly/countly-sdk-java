package ly.count.sdk.java.internal;

import java.util.Arrays;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicInteger;
import ly.count.sdk.java.Countly;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class ModuleDeviceIdTests {

    @After
    public void stop() {
        Countly.instance().halt();
        SDKCore.testDummyModule = null;
    }

    @Before
    public void beforeTest() {
        TestUtils.createCleanTestState();
    }

    /**
     * Device ID acquisition process
     * Initializing the SDK with no custom ID, that should trigger ID generation
     * The acquired device ID should start with "CLY_"
     */
    @Test
    public void generatedDeviceId() {
        Countly.instance().init(TestUtils.getBaseConfig(null));
        validateDeviceIdIsSdkGenerated();
    }

    /**
     * Device ID acquisition process
     * Initializing the SDK with a custom ID, that should not trigger ID generation
     * The acquired device ID should not contain any "CLY_"
     */
    @Test
    public void customDeviceId() {
        Countly.instance().init(TestUtils.getBaseConfig(TestUtils.DEVICE_ID));
        validateDeviceIdDeveloperSupplied(TestUtils.DEVICE_ID);
    }

    /**
     * "changeWithMerge" method with possible entries
     */
    @Test
    public void changeWithMerge() {
        TestUtils.AtomicString deviceID = new TestUtils.AtomicString(TestUtils.DEVICE_ID);
        AtomicInteger callCount = initDummyModuleForDeviceIdChangedCallback(deviceID, false, DeviceIdType.DEVELOPER_SUPPLIED);
        Countly.instance().init(TestUtils.getConfigDeviceId(null)); // to create sdk generated device id
        setupView_Event_Session();
        Assert.assertEquals(1, TestUtils.getCurrentRQ().length); // began session request
        // validate began session request with generated id
        TestUtils.validateRequiredParams(TestUtils.getCurrentRQ()[0], Countly.instance().deviceId().getID());
        validateDeviceIdIsSdkGenerated(); // validate device id generated by the sdk

        String oldDeviceId = Countly.instance().deviceId().getID();
        Assert.assertEquals(0, callCount.get()); // validate "deviceIdChanged" callback not called

        Countly.instance().deviceId().changeWithMerge(deviceID.value); // TestUtils.DEVICE_ID
        Assert.assertEquals(1, callCount.get());
        validateDeviceIdWithMerge(oldDeviceId, 1, 2);

        deviceID.value += "1";
        Countly.instance().deviceId().changeWithMerge(deviceID.value); // TestUtils.DEVICE_ID + "1"
        Assert.assertEquals(2, callCount.get());
        validateDeviceIdWithMerge(TestUtils.DEVICE_ID, 2, 3);
    }

    /**
     * "changeWithoutMerge" with custom device id
     * Validating that new id set and callback is called, and existing events,
     * timed events and session must end, new session must begin
     */
    @Test
    public void changeWithoutMerge() {
        //why atomic string? Because changing it should also trigger dummy module callback asserts.
        //so it should be modifiable from outside
        TestUtils.AtomicString deviceID = new TestUtils.AtomicString(TestUtils.keysValues[0]);
        AtomicInteger callCount = initDummyModuleForDeviceIdChangedCallback(deviceID, true, DeviceIdType.DEVELOPER_SUPPLIED);
        Countly.instance().init(TestUtils.getConfigDeviceId(TestUtils.DEVICE_ID)); //custom id given
        setupView_Event_Session(); // setup view, event and session to simulate a device id change
        validateBeganSessionRequest(); // also validates rq size is 1

        validateDeviceIdDeveloperSupplied(TestUtils.DEVICE_ID);
        Assert.assertEquals(0, callCount.get());

        Countly.instance().deviceId().changeWithoutMerge(deviceID.value);
        Assert.assertEquals(1, callCount.get());
        validateDeviceIdWithoutMergeChange(4); // there should be 2 began, 1 end, 1 events request

        deviceID.value += "1";
        Countly.instance().deviceId().changeWithoutMerge(deviceID.value);
        Assert.assertEquals(2, callCount.get());
        //if device id is not merged, then device id change request should not exist
        //validateDeviceIdWithoutMergeChange(7);
    }

    @Test
    public void changeWithMerge_nullDeviceId() {
        AtomicInteger callCount = initDummyModuleForDeviceIdChangedCallback(null, false, DeviceIdType.SDK_GENERATED);
        Countly.instance().init(TestUtils.getConfigDeviceId(null)); // to create sdk generated device id
        setupView_Event_Session();

        validateDeviceIdIsSdkGenerated();
        Assert.assertEquals(0, callCount.get());

        Countly.instance().deviceId().changeWithMerge(null);
        Assert.assertEquals(0, callCount.get());

        validateBeganSessionRequest(); // also validates rq size is 1
    }

    @Test
    public void changeWithMerge_emptyDeviceId() {
        AtomicInteger callCount = initDummyModuleForDeviceIdChangedCallback(new TestUtils.AtomicString(""), false, DeviceIdType.SDK_GENERATED);
        Countly.instance().init(TestUtils.getConfigDeviceId(null)); // to create sdk generated device id
        setupView_Event_Session();

        validateDeviceIdIsSdkGenerated();
        Assert.assertEquals(0, callCount.get());

        Countly.instance().deviceId().changeWithMerge("");
        Assert.assertEquals(0, callCount.get());
        validateBeganSessionRequest(); // also validates rq size is 1
    }

    @Test
    public void changeWithMerge_sameDeviceId() {
        AtomicInteger callCount = initDummyModuleForDeviceIdChangedCallback(new TestUtils.AtomicString(TestUtils.DEVICE_ID), false, DeviceIdType.DEVELOPER_SUPPLIED);
        Countly.instance().init(TestUtils.getConfigDeviceId(null)); // to create sdk generated device id
        setupView_Event_Session();
        validateBeganSessionRequest(); // also validates rq size is 1

        String oldDeviceId = Countly.instance().deviceId().getID();
        validateDeviceIdIsSdkGenerated();
        Assert.assertEquals(0, callCount.get());

        Countly.instance().deviceId().changeWithMerge(TestUtils.DEVICE_ID);
        Assert.assertEquals(1, callCount.get());
        validateDeviceIdWithMerge(oldDeviceId, 1, 2);

        Countly.instance().deviceId().changeWithMerge(TestUtils.DEVICE_ID);
        Assert.assertEquals(1, callCount.get());
        validateDeviceIdWithMerge(oldDeviceId, 1, 2);
    }

    /**
     * "getID", "getType"
     * Custom id is not given, validating that device id is sdk generated
     * Type must be 'SDK_GENERATED' and generated id should be a valid UUID
     */
    @Test
    public void getID_getType() {
        Countly.instance().init(TestUtils.getBaseConfig(null)); // no custom id given
        validateDeviceIdIsSdkGenerated(); // validate id is a valid UUID
    }

    /**
     * "getID", "getType"
     * Custom id is given, validating that device id is developer supplied
     * Type must be 'DEVELOPER_SUPPLIED' and generated id should be same with the given id
     */
    @Test
    public void getID_getType_customDeviceId() {
        Countly.instance().init(TestUtils.getBaseConfig(TestUtils.DEVICE_ID)); // custom id given
        validateDeviceIdDeveloperSupplied(TestUtils.DEVICE_ID);
    }

    @Test
    public void logout() {
        TestUtils.AtomicString deviceID = new TestUtils.AtomicString(TestUtils.DEVICE_ID);
        AtomicInteger callCount = initDummyModuleForDeviceIdChangedCallback(deviceID, true, DeviceIdType.SDK_GENERATED);
        Countly.instance().init(TestUtils.getBaseConfig(null)); // to create sdk generated device id

        validateDeviceIdIsSdkGenerated();
        Assert.assertEquals(0, callCount.get());

        Countly.instance().logout();
        Assert.assertEquals(1, callCount.get());
    }

    private void validateDeviceIdWithoutMergeChange(final int rqSize) {
        Map<String, String>[] requests = TestUtils.getCurrentRQ();
        Assert.assertEquals(rqSize, TestUtils.getCurrentRQ().length);

        if (rqSize < 1) {
            return;
        }

        AtomicInteger idx = new AtomicInteger();
        Arrays.stream(requests).forEach((request) -> {
            if (request.containsKey("begin_session") && idx.get() != 0) {
                //validate new begin session request
                TestUtils.validateRequiredParams(request, Countly.instance().deviceId().getID());
            } else {
                TestUtils.validateRequiredParams(request);
            }
            Assert.assertNull(request.get("old_device_id"));
            idx.getAndIncrement();
        });
    }

    private void validateDeviceIdWithMerge(String oldDeviceId, final int rqIdx, final int rqSize) {
        Map<String, String>[] requests = TestUtils.getCurrentRQ();
        Assert.assertEquals(rqSize, TestUtils.getCurrentRQ().length);

        TestUtils.validateRequiredParams(requests[rqIdx], Countly.instance().deviceId().getID());
        Assert.assertEquals(oldDeviceId, requests[rqIdx].get("old_device_id"));
    }

    private AtomicInteger initDummyModuleForDeviceIdChangedCallback(TestUtils.AtomicString deviceId, boolean withoutMerge, DeviceIdType type) {
        AtomicInteger callCount = new AtomicInteger(0);
        SDKCore.testDummyModule = new ModuleBase() {
            @Override
            protected void deviceIdChanged(String oldDeviceId, boolean withMerge) {
                super.deviceIdChanged(oldDeviceId, withMerge);
                callCount.incrementAndGet();
                Assert.assertEquals(!withoutMerge, withMerge);
                if (type == DeviceIdType.SDK_GENERATED) {
                    validateDeviceIdIsSdkGenerated();
                } else {
                    validateDeviceIdDeveloperSupplied(deviceId.value);
                }
                Assert.assertEquals(type.index, internalConfig.getDeviceId().strategy);
            }
        };

        return callCount;
    }

    private void validateDeviceIdDeveloperSupplied(String expectedDeviceId) {
        Assert.assertEquals(expectedDeviceId, Countly.instance().deviceId().getID());
        Assert.assertEquals(DeviceIdType.DEVELOPER_SUPPLIED, Countly.instance().deviceId().getType());
    }

    /**
     * Validates that the device id is a valid UUID and starts with "CLY_"
     */
    private void validateDeviceIdIsSdkGenerated() {
        String deviceId = Countly.instance().deviceId().getID();
        Assert.assertTrue(deviceId.startsWith("CLY_"));
        try {
            String[] parts = deviceId.split("CLY_");
            UUID uuid = UUID.fromString(parts[1]);
            Assert.assertEquals(parts[1], uuid.toString());
            Assert.assertEquals(DeviceIdType.SDK_GENERATED, Countly.instance().deviceId().getType());
        } catch (IllegalArgumentException e) {
            Assert.fail("Device id is not a valid UUID");
        }
    }

    private void validateBeganSessionRequest() {
        Map<String, String>[] requests = TestUtils.getCurrentRQ();
        Assert.assertEquals(1, requests.length); // always 1 because it is the first request
        TestUtils.validateRequiredParams(requests[0], Countly.instance().deviceId().getID());
    }

    /**
     * Creates a view, a session and an event to simulate what
     * happens when a device id change occurs
     */
    private void setupView_Event_Session() {
        Countly.session().begin();
        Countly.instance().events().startEvent(TestUtils.keysValues[0]);
        Countly.instance().view(TestUtils.keysValues[1]).start(true);
        Countly.instance().events().recordEvent(TestUtils.keysValues[2]);
    }
}
